using MAT, LinearAlgebra, SparseArrays,LinearSolve
using DifferentialEquations, Sundials 

# assign global node numbers and inner nodes (where the dynamics are of concern)
gnode= reshape(1:62500,25,25,100); #global node numbers
idxnode_inner  =  reshape( gnode[:,:,1:end-4], : , 1);

Jacobianmat = matread("Jacobianmat.mat"); # load jacobian matrix
Jacobianmat = Jacobianmat["Jacobianmat"]; 
Jpattern = Jacobianmat.!=0; # compute jacobian pattern

# define ODE function
function ode_fun!(du, u, p, t)
   du .= Jacobianmat*u;
   nothing
   end

# define jacobian function
function jacobianfun(J,u, p, t)
   J= Jacobianmat;  
   nothing
   end

# define initial condition for the ODE problem
u0= zeros(25,25,100);
u0[:,:,1].= 100; # initially the species is injected at the bottom face of the box
u0= u0[:]; # convert 3d vector into a tall skinny vector
tot_val = sum(u0); # total initial species amount

# define the ODE problem
f_ode = ODEFunction(ode_fun!, jac = jacobianfun, jac_prototype = float.(Jpattern))
tspan = (0.0, 1e-3);
prob = ODEProblem(f_ode, u0, tspan);

# assign saving callback
saved_vals = SavedValues(Float64,Float64);
savecallback = SavingCallback((u, t, integrator) -> sum(u[idxnode_inner]), saved_vals);

print("starting simulation")
@time sol = solve(prob,CVODE_BDF(linear_solver= :GMRES, stability_limit_detect=true)
,save_everystep = false,callback = savecallback,dense= false,reltol = 1e-12,abstol= 1e-7
, maxiters=Int64.(1e8),progress=true);

matwrite("saved_vals.mat", Dict("saved_vals" => saved_vals)); 



